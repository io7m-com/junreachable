<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright © 2014 <code@io7m.com> http://io7m.com

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted, provided that the above
  copyright notice and this permission notice appear in all copies.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  -->

<s:document
  xmlns:s="http://schemas.io7m.com/structural/2.1.0"
  xmlns:xi="http://www.w3.org/2001/XInclude">
  <s:document-title>io7m-junreachable 1.0.2 Documentation</s:document-title>
  <s:document-style>documentation.css</s:document-style>
  <s:document-contents/>

  <s:part>
    <s:part-title>Package Information</s:part-title>
    <s:part-contents />
    <s:section>
      <s:section-title>Orientation</s:section-title>
      <s:subsection>
        <s:subsection-title>Overview</s:subsection-title>
        <s:paragraph>
          The <s:term s:type="package">io7m-junreachable</s:term> package
          implements a set of exception types for unambiguously marking code
          that is supposed to be unreachable (but that the compiler cannot
          prove is unreachable).
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Installation</s:section-title>
      <s:subsection>
        <s:subsection-title>Source compilation</s:subsection-title>
        <s:paragraph>
          The project can be compiled and installed with
          <s:link-external s:target="http://maven.apache.org">Maven</s:link-external>:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[$ mvn -C clean install]]></s:verbatim>
        </s:paragraph>
      </s:subsection>

      <s:subsection>
        <s:subsection-title>Maven</s:subsection-title>
        <s:paragraph>
          Regular releases are made to the
          <s:link-external s:target="http://search.maven.org/#search%7Cga%7C1%7Cio7m-junreachable">Central Repository</s:link-external>,
          so it's possible to use the <s:term s:type="package">io7m-junreachable</s:term>
          package in your projects with the following Maven dependency:
        </s:paragraph>
        <s:paragraph>
          <s:verbatim s:type="example"><![CDATA[<dependency>
  <groupId>com.io7m.junreachable</groupId>
  <artifactId>io7m-junreachable-core</artifactId>
  <version>1.0.2</version>
</dependency>]]></s:verbatim>
        </s:paragraph>
        <s:paragraph>
          All <s:link-external s:target="http://io7m.com">io7m.com</s:link-external>
          packages use Semantic Versioning
          <s:footnote>
            <s:link-external s:target="http://semver.org">http://semver.org</s:link-external>
          </s:footnote>, which implies that it is always safe to use version ranges
          with an exclusive upper bound equal to the next major version - the API of
          the package will not change in a backwards-incompatible manner before the
          next major version.
        </s:paragraph>
      </s:subsection>
    </s:section>

    <s:section>
      <s:section-title>Platform Specific Issues</s:section-title>
      <s:paragraph>
        There are currently no known platform-specific issues.
      </s:paragraph>
    </s:section>

    <s:section>
      <s:section-title>License</s:section-title>
      <s:paragraph>
        All files distributed with the <s:term s:type="package">io7m-junreachable</s:term>
        package are placed under the following license:
        <s:verbatim s:type="license"><![CDATA[Copyright © 2014 <code@io7m.com> http://io7m.com

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.]]>
        </s:verbatim>
      </s:paragraph>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>Usage</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Exceptions</s:section-title>
      <s:subsection>
        <s:subsection-title>Unreachable</s:subsection-title>
        <s:paragraph>
          The Java compiler typically cannot detect unreachable cases
          in, for example, switch statements:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Unreachable switch</s:formal-item-title>
          <s:verbatim><![CDATA[enum T
{
  A,
  B,
  C
}

int f(
  final T t)
{
  assert t != null;

  switch (t) {
    case A:
    {
      return 1;
    }
    case B:
    {
      return 2;
    }
    case C:
    {
      return 3;
    }
  }
}]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The function <s:term s:type="function">f</s:term> will fail to
          compile due to a missing <s:term s:type="keyword">return</s:term>
          statement; even though all possible cases of
          <s:term s:type="type">T</s:term> are handled, the compiler is
          not sufficiently intelligent to determine this. Naive developers
          might try to add a <s:term s:type="keyword">default</s:term> case,
          but this makes the code fragile with respect to modification; if
          someone adds an extra value to <s:term s:type="type">T</s:term>, the
          code silently becomes incorrect. The correct course of action is to
          explicitly mark the unreachable code with an exception that unambiguously
          states the intention:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Unreachable switch (fixed)</s:formal-item-title>
          <s:verbatim><![CDATA[enum T
{
  A,
  B,
  C
}

int f(
  final T t)
{
  assert t != null;

  switch (t) {
    case A:
    {
      return 1;
    }
    case B:
    {
      return 2;
    }
    case C:
    {
      return 3;
    }
  }

  throw new UnreachableCodeException();
}]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The code now compiles. The code is robust in the face of later
          modification of <s:term s:type="type">T</s:term>. Anyone reading
          the code understands that the original writer expected the code
          to be unreachable. Anyone running the code and somehow managing
          to reach the unreachable section is greeted with an unambiguous
          exception that states that a bug has been discovered (and the
          stack trace will indicate exactly where this happened).
        </s:paragraph>
      </s:subsection>
      <s:subsection>
        <s:subsection-title>Unimplemented code</s:subsection-title>
        <s:paragraph>
          Most Java development environments will automatically produce
          empty method stubs when the programmer attempts to implement
          an interface. The generated methods typically look something like:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Generated method stubs</s:formal-item-title>
          <s:verbatim><![CDATA[@Override void someInterfaceMethod()
{
  // TODO: Auto-generated method stub
}
]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          The programmer doesn't always have a complete implementation
          ready immediately, and unfortunately nothing stops anyone from
          running the as-yet unimplemented methods. The correct course of
          action is to explicitly mark this unimplemented code with an
          exception type that unambiguously states the nature of the code:
        </s:paragraph>
        <s:formal-item s:kind="example">
          <s:formal-item-title>Generated method stubs (fixed)</s:formal-item-title>
          <s:verbatim><![CDATA[@Override void someInterfaceMethod()
{
  // TODO: Auto-generated method stub
  throw new UnimplementedCodeException();
}
]]></s:verbatim>
        </s:formal-item>
        <s:paragraph>
          Discovering unimplemented code is now as simple as searching
          for uses of <s:term s:type="type">UnimplementedCodeException</s:term>
          in the codebase. Anyone managing to execute unimplemented code will
          be greeted with an exception that states exactly which code is
          unimplemented. Most development environments can be instructed to
          automatically generate code that throws
          <s:term s:type="type">UnimplementedCodeException</s:term>
          exceptions as in the above example.
        </s:paragraph>
      </s:subsection>
    </s:section>
  </s:part>

  <s:part>
    <s:part-title>API Reference</s:part-title>
    <s:part-contents/>
    <s:section>
      <s:section-title>Javadoc</s:section-title>
      <s:paragraph>
        API documentation for the package is provided via the
        included <s:link-external s:target="apidocs">Javadoc</s:link-external>.
      </s:paragraph>
    </s:section>
  </s:part>

</s:document>
